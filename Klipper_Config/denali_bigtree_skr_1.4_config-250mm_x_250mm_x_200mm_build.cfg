# This file has been created by Feb, of Annex Engineering, for the Denali 3D Printer.
# Please change settings for your specific build or ensure you place your items in the same spots on the same MCU as I have.
# I've added as many options as I can think of for different displays as well as listed the available commands you can use via the terminal at the bottom of this configuration file.

#THIS CONFIG IS FOR A 250mm x 250mm x 200mm DENALI PRINTER ONLY FOR THE SKR1.3 CONTROLLER
#PLEASE READ THE WHOLE CONFIG BEFORE ATTEMPTING TO DO ANYTHING
#CONNECTORS/PORTS ON THE CONTROLLERS ARE NOTED WITH COMMENTS FOR EACH LOCATION/INPUT/OUTPUT

#How do I upgrade to the latest software?
#The general way to upgrade is to ssh into the Raspberry Pi and run:
#cd ~/klipper
#git pull
#~/klipper/scripts/install-octopi.sh

#Then one can recompile and flash the micro-controller code. For example:
#make menuconfig
#make clean
#make
#sudo service klipper stop
#make flash FLASH_DEVICE=/dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
#sudo service klipper start

#However, it's often the case that only the host software changes. In this case, one can update and restart just the host software with:
#cd ~/klipper
#git pull
#sudo service klipper restart
#If after using this shortcut the software warns about needing to reflash the micro-controller or some other unusual error occurs, then follow the full upgrade steps outlined above. Note that the RESTART and FIRMWARE_RESTART g-code commands do not load new software - the above "sudo service klipper restart" and "make flash" commands are needed for a software change to take effect.


# use the following modifiers before the pin definition (ex: ^!ar99)
# ! 			invert the logic
# ^ 			activate 5v pullup (does not apply to all pins)
# mcu_name: 	use pins on additional MCU (ex: z:ar10)


# MCU XYE
[mcu] 
	#You will need to set this definition manually following the instructions in the line below
#	obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
restart_method: command

# MCU Z
[mcu z] 
#	You will need to set this definition manually following the instructions in the line below
#	obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
restart_method: command

#virtual sdcard settings
[virtual_sdcard]
path: ~/gcode_files

#enable display status for moonraker
[display_status]

# Enable Pause/Resume Functionality
[pause_resume]

#Printer Speeds and Accels
[printer]
kinematics: corexy
max_velocity: 300
max_accel: 2000
max_z_velocity: 30
max_z_accel: 100
square_corner_velocity: 5.0

#Gcode G2/G3 Arc Support
[gcode_arcs]
resolution: 0.1

#Input Shaper Settings
# you need to tune your printer for this
# [input_shaper]
# shaper_freq_x: 40
# shaper_freq_y: 50
# shaper_type: mzv


# Stepper Configs
[stepper_x]
# connected to SKR XYE - X Stepper
step_pin: P2.2
dir_pin: !P2.6
enable_pin: !P2.1
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to SKR XYE - X Endstop
endstop_pin: !P1.29
position_min: 0
position_endstop: 250
position_max: 250
homing_speed: 100.0
second_homing_speed: 3.0
homing_retract_dist: 3.0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: P1.10
interpolate: true
run_current: 0.8 
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_y]
# connected to SKR XYE - Y Stepper
step_pin: P0.19
dir_pin: !P0.20
enable_pin: !P2.8
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to SKR XYE - Y Endstop
endstop_pin: !P1.28
position_min: 0
position_endstop: 250
position_max: 250
homing_speed: 100.0
second_homing_speed: 3.0
homing_retract_dist: 3.0
homing_positive_dir: true
 
[tmc2209 stepper_y]
uart_pin: P1.9
interpolate: true
run_current: 0.8 
sense_resistor: 0.110
stealthchop_threshold: 0
 
[stepper_z]
# connected to SKR Z - X Stepper
step_pin: z:P2.2
dir_pin: z:P2.6
enable_pin: z:!P2.1
#SFU1204 Ballscrew attached to a 1.8 deg Motor
rotation_distance: 16
microsteps: 4
full_steps_per_rotation: 200
# connected to Probe Endstop
endstop_pin: probe:z_virtual_endstop

position_max: 180 #this is set here on purpose, your actual travel will vary based on spring compression holding the bed, adjust at your own risk
position_min: 0 #this is set here on purpose, your actual travel will vary based on spring compression holding the bed, adjust at your own risk
homing_speed: 15.0
second_homing_speed: 5.0
homing_retract_dist: 10.0
homing_positive_dir: false
 
[tmc2209 stepper_z]
uart_pin: z:P1.10
interpolate: false
run_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0
 
[stepper_z1]
# connected to SKR Z - Y Stepper
step_pin: z:P0.19
dir_pin: z:P0.20
enable_pin: z:!P2.8
#SFU1204 Ballscrew attached to a 1.8 deg Motor
rotation_distance: 16
microsteps: 4
full_steps_per_rotation: 200
 
[tmc2209 stepper_z1]
uart_pin: z:P1.9
interpolate: false
run_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0
 
[stepper_z2]
# conected to SKR Z - E0 Stepper
step_pin: z:P2.13
dir_pin: z:P0.11
enable_pin: z:!P2.12
#SFU1204 Ballscrew attached to a 1.8 deg Motor
rotation_distance: 16
microsteps: 4
full_steps_per_rotation: 200

[tmc2209 stepper_z2]
uart_pin: z:P1.4
interpolate: false
run_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0


# Force Move
#	used to force a single stepper to move.  not used once setup
#[force_move]
#enable_force_move: true

#	Enable Pause/Resume Functionality
[pause_resume]

# Dockable Probe
[dockable_probe]
# connected to SKR XYE - Z Endstop
endstop_pin: P1.27
x_offset: 0.0
y_offset: 25.0 # offset for inductive probe y direction off nozzle
z_offset: 8.00 # offset for inductive probe in z height, you will have to tune this yourself
samples: 1
sample_retract_dist: 5
samples_result: median
samples_tolerance: 0.02
samples_tolerance_retries: 3
speed: 3
lift_speed: 10

# dockable probe specific
dock_position:             150,250,20 #center rear of gantry
safe_z_position:           125,125 #center of bed
approach_position:		   150,225
detach_position:		   175,250
attach_speed:              20
detach_speed:              100
travel_speed:              300
check_open_attach:         True
dock_fixed_z:              True
dock_retries:			   1

#   Optional custom gcode sections for dockable probe
pre_attach_gcode:
    G1 X40 Y40 F18000    #keep umbilical from catching on stuff
pre_detach_gcode:
    G1 X40 Y40 F18000   #keep umbilical from catching on stuff
post_detach_gcode:
	G1 X125 Y125 F18000  #keep gantry from murdering itself after docking probe


# Extruder0
[extruder]
# conected to SKR XYE - E1 Stepper
step_pin: P1.5
dir_pin: P1.4
enable_pin: !P1.16
rotation_distance: 22.67895 #for 5mm Shaft Driven Bondtech gearsets
gear_ratio: 5:1 #Sherpa Mini uses 5:1, Folded Ascender Use 40:1 or 20:1
microsteps: 16
full_steps_per_rotation: 200 #1.8 deg motor


#0.4mm Nozzle
nozzle_diameter: 0.400
#pressure_advance: 0.04665 
#pressure_advance_smooth_time: 0.040
filament_diameter: 1.750	
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 120.0
max_extrude_only_accel: 15000.0
max_extrude_cross_section: 20000.0


# connected to SKR XYE - HE0 Heater
heater_pin: P2.7
max_power: 1.0

# connected to SKR XYE - TH0
sensor_type: ATC Semitec 104GT-2
sensor_pin: P0.24

#0.4mm Nozzle Settings
smooth_time: 3.0
max_power: 1.0

#Hotend PID Settings
control: pid
pid_Kp: 32.426 
pid_Ki: 1.743
pid_Kd: 150.782

min_extrude_temp: 0
min_temp: 0
max_temp: 300

[tmc2209 extruder]
# conected to SKR XYE - E1 Stepper
uart_pin: P1.1
microsteps: 16
interpolate: false
run_current: 0.30
sense_resistor: 0.110
stealthchop_threshold: 0

 
# Heated Bed  
[heater_bed]
# connected to SKR XYE - BED
heater_pin: P2.5
# NTC 100K MGB18-104F39050L32 is for Kenovo thermistors
sensor_type: NTC 100K MGB18-104F39050L32
# connected to SKR XYE - HB Temp
sensor_pin: P0.25
smooth_time: 3.0

#Build Plate PID Settings
max_power: 0.60
control: pid
pid_Kp: 42.475 
pid_Ki: 1.395 
pid_Kd: 323.339
min_temp: 0
max_temp: 110

# Raspberry Pi Temperature Sensor
[temperature_sensor pi_cpu]
sensor_type: temperature_host
gcode_id: P
 
# Fans  
# Hotend Cooling Fan
[heater_fan my_nozzle_fan]
# connected to SKR XYE - FAN
pin: P2.3
max_power: 1.0
hardware_pwm: false
kick_start_time: 0.500
heater: extruder
heater_temp: 75.0
fan_speed: 1.00
 
# Print Cooling Fan
[fan]
# connected to SKR Z - FAN
pin: Z:P2.3
max_power: 1.0
hardware_pwm: false
kick_start_time: 0.500


# Mesh Bed Settings
[bed_mesh]
speed: 200
horizontal_move_z: 12
mesh_min: 40,40
mesh_max: 260,260
probe_count: 5,5
fade_start: 1
fade_end: 0
split_delta_z: .025
move_check_distance: 5.0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.1
relative_reference_index: 12  # ^^^because were measuring the offset from the nozzle switch to the bed using the center of the bed, the equation to find the location = (probe point count)/2-1

# Z Tilt Bed Adjustment settings
[z_tilt]
#z_positions: 0,0
#			 1,1
#			 2,2
#	You will need to set these yourself, based on offset from the nozzle to the shoulder bolt pivots under the bed, you can then uncomment the lines above
#	To do this, put the gantry at 0,0 and measure the offset from the nozzle using a metric tape measure, place the coordinates into the lines above
#   A list of X,Y coordinates (one per line; subsequent lines
#   indented) describing the location of each bed "pivot point". The
#   "pivot point" is the point where the bed attaches to the given Z
#   stepper. It is described using nozzle coordinates (the XY position
#   of the nozzle if it could move directly above the point). The
#   first entry corresponds to stepper_z, the second to stepper_z1,
#   the third to stepper_z2, etc.
points: 50,50
		50,200
		200,125
#   A list of X,Y coordinates (one per line; subsequent lines
#   indented) that should be probed during a Z_TILT_ADJUST command.
#   Specify coordinates of the nozzle and be sure the probe is above
#   the bed at the given nozzle coordinates.
speed: 200
horizontal_move_z: 12.0
retries: 6
retry_tolerance: 0.005


# Fysetc Mini 12864Panel v2.1 (with neopixel backlight leds) Configuration 
# (Untested at this time, may require tweaking)

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,
    EXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,
    EXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "ssp0"

[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
contrast: 63
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: EXP1_1

[neopixel fysetc_mini12864]
pin: EXP1_6
chain_count: 3
color_order: RGB
initial_RED: 0
initial_GREEN: 0.4
initial_BLUE: 0


# Motor and Heater Idle Timeout
[idle_timeout]
timeout: 6000


#	Macros
#	pre-print-prep macro
[gcode_macro pre_print_prep]
gcode:
        chamber_lighting_on ;turn on lighting
        abs_warmup_temp ;tell bed to warm up
		Z_TILT_ADJUST	;adjust bed so its square to gantry
        BED_MESH_CALIBRATE ;Run Bed Mesh

#	macro to level the gantry.  use G32 in the terminal to call
[gcode_macro g32]
gcode:
		Z_TILT_ADJUST	;adjust bed so its square to gantry
	
#	macro to level bed to the gantry
[gcode_macro square_bed_to_machine]
gcode:
		G32	;adjust bed so its square to gantry

#	mesh bed level the machine
[gcode_macro mesh_bed_level_machine]
gcode:
		BED_MESH_CALIBRATE	;Run Bed Mesh

#	combined print start gcode macro that takes into account temperature from the slicer
[gcode_macro print_start]
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}
    {% set BED = params.BED|default(110) %}
	print_start_1			;print start macro 1
	M140 S{BED}			;set bed temperature and wait
	M109 S{EXTRUDER}		;set hotend temperature and wait
	M190 S{BED}			;set bed temperature and do not wait
	print_start_2			;print start macro 2
	prime_line_regular	;draw prime line in corner of bed

[gcode_macro print_start_1]
gcode:
	M104 S0 #cancel set temp
	M107 #turn cooling fans off
	G21  # set units to mm
	G90  # use absolute coordinates
	T0  # select tool 0
	M83	# use relative extrusion
	G92 E0.0  # reset e count
	M220 S100 # reset speed multiplier
	nozzle_brush_location	#move to nozzle scrubber bucket

[gcode_macro print_start_2]
gcode:
	#nozzle_clean		#clean nozzle - change to brush location and uncomment
	
[gcode_macro prime_line_regular]
gcode:
	G1 Z20 F6000
	G1 X20 Y40 F12000
	G1 Z0.5 F600
	G1 Y105 E10 F1000
	G1 Y115 E2.5 F1000
	G92 E0.0             ;set extruder to Zero
    G92 Z0.5             ;let printer know its at 0.5
    G90                  ;set to absolute

#    Use print_end for you slicer ending script    
[gcode_macro print_end]
gcode:
	G91  							#relative positioning
	G0 E-0.3 F4800  				#retract 5mm of filament
	G0 Z+1.00 X-2 Y-2 F6000  		#short quick move to disengage from print
	G0 Z+5.00  F6000  				#move Z-Axis 1mm away from part

	G90  					#absolute positioning
	G0 X50 Y50 				#move gantry close to xy min, by nozzle switch in front
	G91  					#relative positioning
	G0 E10 F400			#extrude filament to get better blob on end
	G0 E-0.30 F1800  		#retract additional filament to move out of melt zone
	G90 					#absolute positioning

	M104 S0  				#turn off hotend
	#M140 S0  				#turn off heatbed

	#z bed placement control for end of print
    SAVE_GCODE_STATE NAME=END_state
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 130|float %}    #if z position >= 130mnm do the following
        G91              #relative positioning
        G1 Z+10 F600     #move z down 10mm
        G90              #absolute positioning
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z130 F600     #move z to 130mm
    {% endif %}
    RESTORE_GCODE_STATE NAME=END_state

	M106 S0  				#shut off part cooling fans
	#M84					#turn off motors
	clear_pause				#clear pause state encase it was enabled

#	Macro to execute when pausing printer
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

#	Macro to execute when resuming printer
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

#	Macro to execute when canceling a print
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    print_end #execute the print end macro
	CLEAR_PAUSE
  	SDCARD_RESET_FILE
  	BASE_CANCEL_PRINT

#	Notify when ABS Timer is complete
[delayed_gcode notify_chamber]
initial_duration: 0
gcode:
 {gcode.action_respond_info("action:prompt_begin Chamber Preheated")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Set Temps for chamber warmup when printing with abs 
[gcode_macro abs_warmup_temp]
gcode:
		{% set BED = params.BED|default(110) %}
		M106 S255					#turn part cooling fan on to blow heat around chamber
		M190 S{TEMP}				#set bed temperature and wait
		G28							#home machine
		G0 X125 Y125 Z20 F3000		#move to center of bed
		UPDATE_DELAYED_GCODE ID=notify_chamber DURATION=1200

#	Notify when filament is unloaded and ready to reload
[delayed_gcode notify_extruder_reload]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin Ready to Load Filament")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Load Filament
[gcode_macro load_filament]
gcode:
		{% set EXTRUDER = params.EXTRUDER|default(260) %}
		turn_fans_off			#turn part cooling fans off
		G0 X10 Y40 F18000		#move to area where can easily load filament
        {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
            # do nothing
        {% elif printer.toolhead.position.z|float >= 50|float %}    #if z position >= 50mnm do the following
            #do nothing
        {% else %}  		 #if you dont meet any of the criteria
            G90              #absolute positioning
            G1 Z50 F600     #move z to 50mm
        {% endif %}
		M109 S{EXTRUDER}		#set hotend temperature and wait
		M83						#relative positioning on extruder	
		G0 E120 F400  			#prime extruder
		M109 S0					#turn off extruder
		UPDATE_DELAYED_GCODE ID=notify_extruder_load DURATION=10

#	Notify when filament is loaded
[delayed_gcode notify_extruder_load]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin FIlament is Loaded")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Unload Filament
[gcode_macro unload_filament]
gcode:
		{% set EXTRUDER = params.EXTRUDER|default(260) %}
		turn_fans_off			#turn part cooling fans off
		G0 X10 Y40 F18000		#move to area where can easily load filament
        {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
            # do nothing
        {% elif printer.toolhead.position.z|float >= 50|float %}    #if z position >= 50mnm do the following
            #do nothing
        {% else %}  		 #if you dont meet any of the criteria
            G90              #absolute positioning
            G1 Z50 F600     #move z to 50mm
        {% endif %}
		M109 S{EXTRUDER}		#set hotend temperature and wait	
		M83						#relative positioning on extruder
		G0 E5 F400			#extrude filament to get better blob on end
		G0 E-600 F1800  		#retract additional filament to move out of melt zone
		UPDATE_DELAYED_GCODE ID=notify_extruder_reload DURATION=10

#	Scrubs the nozzle on the brass brush located in the build chamber   	
[gcode_macro nozzle_clean]
gcode:
	SAVE_GCODE_STATE NAME=clean_nozzle_state	#store current nozzle location
	nozzle_brush_location		#move to nozzle brush
	G91 						#relative positioning
	G0 Z-27 F600				#move nozzle to end of brush and into bristles
    {% for n in range(6) %}
		nozzle_clean_path		#run macro for nozzle clean
    {% endfor %}
    G0 Z25 F600				#move nozzle out of bristles
	G90
	RESTORE_GCODE_STATE NAME=clean_nozzle_state MOVE=1 #restore current nozzle location

#	Path that the nozzle cleaning macro will follow to clean nozzle (must be in relative coordinate gcode)  	
[gcode_macro nozzle_clean_path]
gcode:
	G0 Y+60 F12000				#scrub
	G0 Y-60 F12000				#scrub

#	Where to start the nozzle brush cleaning pattern  	
[gcode_macro nozzle_brush_location]
gcode:
	G0 X0 Y40 F18000
    G0 Z25.0 F600			#move to nozzle scrubber

#	Macro for M600 - filament out pause resume 
[gcode_macro M600]
gcode:
    {% set X = params.X|default(40) %}
    {% set Y = params.Y|default(40) %}
    {% set Z = params.Z|default(10) %}
	{% if printer.toolhead.status == "Ready" %}
		# do nothing
	{% else %}
    	M117 Filament Change
		SAVE_GCODE_STATE NAME=M600_state
    	PAUSE
		G91
		G1 E-5 F4000
		G1 Z{Z}
		G90
		G1 X{X} Y{Y} F3000
		G0 E15 F1800			#extrude filament to get better blob on end
		G0 E-500 F4800  		#retract additional filament to move out of melt zone
		RESTORE_GCODE_STATE NAME=M600_state
	{% endif %}

#	Use this command to load filament during a mid print filament swap	
[gcode_macro SWAP_RESUME] 
gcode:
 	M117 Printing...
	LOAD_FILAMENT
	RESUME

#	Macro to Turn Fans Off
[gcode_macro turn_fans_off]
gcode:
	M107

#	Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing: M204.1
gcode:

   {% if 'P' in params %}{% set accel = params.P %}{% endif %}
   {% if 'S' in params %}{% set accel = params.S %}{% endif %}
   {% if 'T' in params %}{% set accel = params.T %}{% endif %}

    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float / 2.0}

#	Macro to Attach the Magnetic Probe
[gcode_macro attach_probe_to_toolhead]
gcode:
	ATTACH_PROBE
	
#	Macro to Detach the Magnetic Probe
[gcode_macro detach_probe_from_toolhead]
gcode:
	DETACH_PROBE